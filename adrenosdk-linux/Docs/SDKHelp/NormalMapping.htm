<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<LINK REL = "stylesheet"
TYPE = "text/css"
HREF = "SDKStyleSheet.css">

<meta name="GENERATOR" content="Microsoft&reg; HTML Help Workshop 4.1">
<Title>NormalMapping</Title>
</HEAD>
<BODY>

<IMG class="HeaderImage" SRC= SDK_HelpBanner_v5.png>


<H1>NormalMapping</H1>
This sample demonstrates how to set up and use normal mapping.
<p>
<IMG src =NormalMapping.bmp >

<H1>Details</H1>
Normal mapping is a per-pixel lighting technique. The normals for every pixel are supplied by a normal map. A normal map is like a texture map except that normals instead of colors are stored for each texel.  
<H2>The Mathematics of Normal Mapping</H2>

The lighting equation used by the sample is based on <b>N.L</b>, the dot product of the geometry normal and the light vector. The problem is that both of these values must be defined in the same 3D space. If, for example, the light is defined in camera space, and the normal is defined in some rotated model space, then the lighting equation will not make sense. It is necessary to define a space to which to transform these quantities. For performance the best results are obtained by transforming everything into texture space.
<p>
In order to transform lighting vectors into texture space it is necessary to introduce tangent space. Tangent space refers to the tangential surface of the 3D model, which is the surface where textures are applied. 
<p>
Tangent space basis vectors are just a mechanism to define which way is left-right, up-down, and in-out for the normal map to be applied. In fact, the tangent space basis vectors are mathematically derived from texture coordinates.
<p>
Tangent space basis vectors are three vectors (called the normal, tangent, and binormal) that define a 3x3 transformation matrix to rotate any vector in object space into the tangent space. These three vectors are defined per-vertex.
<p>
In the vertex shader, the operation to transform any object space vector into tangent space is then as simple as any matrix-vector multiplication:
<pre>
    vVectorTS.x = dot( vVectorOS.xyz, Vertex.vTangent.xyz );
    vVectorTS.y = dot( vVectorOS.xyz, Vertex.vBinormal.xyz);
    vVectorTS.z = dot( vVectorOS.xyz, Vertex.vNormal.xyz);
</pre>
The normal is fetched from a normal map, letting an artist define the “bumpiness” of a surface.
<p>
Here's a side-by-side comparison of Phong lighting (no bumps) and normal mapping (with bumps):
<p>
<IMG src =NormalMapping2.bmp >
<p>
The light vector and eye vector, once transformed are passed to the fragment shader. The interpolated per-pixel vectors are then used in the lighting equations, along with the per-pixel normals fetched from the normal map. Since everything is in tangent space, the equations work as expected.
<p>
One last mathematical note is needed to explain how normal maps are stored. Since textures are designed to hold RGB data in the range [0..1], a scale-and-bias operation is needed to convert normals into the range [-1..+1]. The XYZ components of the normal are otherwise mapped the RGB channels of the texture, leaving the alpha channel free for other use. In the pixel shader, the code to fetch a normal is:
<pre>
    vec3 vNormal = texture2D( NormalMap, vTexCoord ).xyz * 2.0 - 1.0;
</pre>

<H2>Art Considerations</H2>
For normal mapping to work the 3D geometry with per-vertex tangent space basis vectors must be supplied as well as normal maps.
<p>
The geometry data can be generated by the 3D modeling tools, or can be computed algorithmically from the texture coordinates and vertex normals. Either way, for performance reasons the 3D geometry should be processed offline, and your runtime code should only be loading meshes with tangent spaces already computed.
<p>
Normal maps are also created by 3D modeling packages and various other related tools, such as AMD’s NormalMapper tool. One common authoring approach is for artists to create monochromatic height maps that are then fed into a tool to produce the RGB normal maps. Note that the normal map may also compressed, using special texture compression formats designed for normal maps.
<p>
An example of a base diffuse map, height map, and corresponding normal map is shown here:
<p>
<IMG src =NormalMapping3.bmp >
<p>

<H1>Controls</H1>
<TABLE>
<TR><TD class="sampleControl">Key</TD><TD class="sampleControl">Action</TD></TR>
<TR><TD><B>*</B></TD><TD>Change orientation</TD></TR>
<TR><TD><B>0</B></TD><TD>Toggle help</TD></TR>
<TR><TD><B>1</B></TD><TD>Toggles the normal mapping technique</TD></TR>
<TR><TD><B>2</B></TD><TD>Pause the camera</TD></TR>
<TR><TD><B>3</B></TD><TD>Decrease the camera speed</TD></TR>
<TR><TD><B>4</B></TD><TD>Increase the camera speed</TD></TR>
<TR><TD><B>PrtSc</B></TD><TD>Take screen snapshot</TD></TR>
</TABLE>
<P>

<iframe src = "Footer.htm" width = "100%" height = "120" frameborder = "0" scrolling = "no">
</iframe>

</BODY>
</HTML>
