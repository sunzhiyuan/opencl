<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<LINK REL = "stylesheet"
TYPE = "text/css"
HREF = "SDKStyleSheet.css">

<meta name="GENERATOR" content="Microsoft&reg; HTML Help Workshop 4.1">
<Title>Migrating from OpenGL 2.0 to OpenGL ES 2.0</Title>
</HEAD>
<BODY>

<IMG class="HeaderImage" SRC= SDK_HelpBanner_v5.png>


<H1>Migrating from OpenGL 2.0 to OpenGL ES 2.0</H1>

The purpose of this document is to assist in the migration of OpenGL 2.0 content to OpenGL ES 2.0. It is assumed that the reader is familiar with OpenGL.
<p>
In order to avoid confusion between OpenGL and OpenGL ES, OpenGL will be referred to desktop OpenGL, and the ES suffix will always be used when referring to the embedded version.

<H1>Removal of Fixed Function API</H1>
A primary design goal with OpenGL ES has been to make the API as streamlined and lightweight as possible. For 2.0, this meant entirely removing any APIs related to the fixed function pipeline. This change has particular significance for games being ported from OpenGL ES 1.x or desktop OpenGL 1.x, but likely also impacts games being ported from desktop OpenGL 2.0, since even 2.0 games tend to use pieces of the fixed function API for convenience.
<p>
For a detailed discussion of the fixed function APIs that have been removed, and what they have been replaced with, see the document Migrating from OpenGL ES 1.x to OpenGL ES 2.0, as well as the official OpenGL ES website at <a href="http://www.khronos.org">http://www.khronos.org</a>.

<H1>Shader Differences</H1>
Although the remaining OpenGL ES 2.0 API will be familiar to anyone who has worked with desktop OpenGL 2.0, there have been several changes to accommodate resource constraints on embedded platforms.

<H2><i>Binary Shaders</i></H2>
Compiling a shader on an embedded platform may be impractical for several reasons, including the size of an optimized shader compiler and the cost of actually compiling the shader. For this reason, OpenGL ES 2.0 introduces the ability to compile the shader offline, and provide it to the driver in binary format at runtime. QUALCOMM provides tools to generate optimized binaries for our platforms.

<H2><i>OpenGL ES Shading Language</i></H2>
GLSL ES, the shading language for OpenGL ES, is nearly identical to the desktop OpenGL Shading Language. However, there are some important differences and limitations.

<H3>Built-in State</H3>
Related to the fixed function pipeline being removed, almost all of the built-in state variables have been removed from GLSL ES. Instead, it is up to the application to manage these values, passing them to shaders as uniform variables as appropriate.

<H3>Texturing</H3>
The functions for 1D textures and shadow textures have been removed.

<H3>Attributes and Uniforms</H3>
GLSL ES guarantees a smaller number of attribute (8 attributes consisting of 4 floating point values) and uniform (384 floating point values) variables than desktop GLSL. An implementation is free to support more than the minimum required.

<H3>Optional Extensions</H3>
The standard noise functions and derivative functions included as part of the desktop OpenGL Shading Language have been removed from GLSL ES. However, they may be available as optional extensions.

<H3>Precision Specification</H3>
Since smaller data types are conducive to lower power consumption, three variable precision qualifiers have been added: lowp, mediump, and highp. Values declared in vertex shaders default to highp, but fragment shaders have no default value, so their precision must be explicitly declared. Finally, the precision of varying variables must match between the vertex and fragment shader.
<p>
The exact range and precision of each of these qualifiers is implementation dependent. highp is required to be able to represent a range from -262 to 262, and the precision must be at least 1/65536. mediump is required to be able to represent a range from -16384 to 16384, and the precision must be at least 1/1024. The only requirement for lowp is that it must be able to represent all color values.

<H3>Other Changes</H3>
Other changes and additions to the shading language include:
<UL>
<LI>A preprocessor constant, GL_ES, has been defined to ease desktop portability. This allows you to use the following:
<pre>
#ifdef GL_ES
  // embedded version of the shader
#else
  // desktop version of the shader
#endif
</pre>
</LI>
<LI>Outputs can be declared invariant, which helps ensure the same results when multipass algorithms are employed.</LI>
<LI>Games have better control over how texture coordinates for point sprites are generated by being provided with the built-in varying variable gl_PointCoord.</LI>
</UL>

<H1>Further Reading</H1>
For more information about OpenGL ES 2.0 and GLSL ES, see the specification documents at the Khronos website (<a href="http://www.khronos.org">http://www.khronos.org</a>)


<iframe src = "Footer.htm" width = "100%" height = "120" frameborder = "0" scrolling = "no">
</iframe>

</BODY>
</HTML>
